{"version":3,"sources":["webpack:///./src/views/Tone.vue?0f14","webpack:///./node_modules/tonal-note/build/es6.js","webpack:///./node_modules/tonal-interval/build/es6.js","webpack:///./node_modules/tonal-array/build/es6.js","webpack:///./node_modules/tonal-pcset/build/es6.js","webpack:///./node_modules/tonal-dictionary/build/es6.js","webpack:///./node_modules/tonal-detect/build/es6.js","webpack:///src/views/Tone.vue","webpack:///./src/views/Tone.vue?8135","webpack:///./src/views/Tone.vue","webpack:///./src/views/Tone.vue?b4c5"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","id","_v","staticClass","_s","getChord","notes","on","click","clickHandler","staticRenderFns","NAMES","split","es6_names","accTypes","slice","filter","n","acc","indexOf","REGEX","tokenize","str","m","exec","toUpperCase","replace","NO_NOTE","Object","freeze","pc","name","step","alt","oct","octStr","chroma","midi","freq","SEMI","properties","tokens","letter","p","charCodeAt","length","midiToFreq","memo","fn","cache","props","es6_name","tuning","Math","pow","log","IVL_TNL","IVL_STR","es6_REGEX","RegExp","SIZES","TYPES","es6_tokenize","NO_IVL","num","q","dir","type","simple","semitones","qToAlt","test","numToStep","abs","es6_properties","t","floor","es6_props","es6_chroma","rotate","times","arr","len","concat","compact","height","sort","src","map","a","b","es6_chr","build_es6_chroma","set","isChroma","Array","isArray","forEach","i","join","modes","normalize","binary","_","r","build_es6_REGEX","es6_dictionary","raw","keys","data","index","add","ivls","push","key","alias","chr","allKeys","dict","names","combine","scale","scales","chord","chords","pcset","detector","dictionary","defaultBuilder","tonic","builder","mode","x","es6_chord","Tonevue_type_script_lang_js_","_this","noteArr","polySynth","Tone_default","PolySynth","Synth","toMaster","pattern","Pattern","time","note","triggerAttackRelease","$set","parseInt","isPlaying","methods","stop","start","computed","every","mounted","audioUnlock","context","Transport","beforeDestroy","cancel","views_Tonevue_type_script_lang_js_","component","componentNormalizer","options","__file","__webpack_exports__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Tone_vue_vue_type_style_index_0_id_0a47094a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Tone_vue_vue_type_style_index_0_id_0a47094a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/chunk-1b54cf72.a0eed0f8.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"tone\"}},[_c('h1',[_vm._v(\" Tone.js \")]),_c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(_vm._s(_vm.getChord))]),_c('h3',[_vm._v(_vm._s(_vm.notes[0])+\", \"+_vm._s(_vm.notes[1])+\", \"+_vm._s(_vm.notes[2])+\", \"+_vm._s(_vm.notes[3]))]),_c('button',{on:{\"click\":_vm.clickHandler}},[_vm._v(\" Play / Pause\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-note.svg)](https://www.npmjs.com/package/tonal-note)\n * [![tonal](https://img.shields.io/badge/tonal-note-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-note` is a collection of functions to manipulate musical notes in scientific notation\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as Note from \"tonal-note\"\n * // or const Note = require(\"tonal-note\")\n * Note.name(\"bb2\") // => \"Bb2\"\n * Note.chroma(\"bb2\") // => 10\n * Note.midi(\"a4\") // => 69\n * Note.freq(\"a4\") // => 440\n * Note.oct(\"G3\") // => 3\n *\n * // part of tonal\n * const Tonal = require(\"tonal\")\n * // or import Note from \"tonal\"\n * Tonal.Note.midi(\"d4\") // => 62\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-note](https://nodei.co/npm/tonal-note.png?mini=true)](https://npmjs.org/package/tonal-note/)\n *\n * ## API Documentation\n *\n * @module Note\n */\n\nvar NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\n\n/**\n * Get a list of note names (pitch classes) within a octave\n *\n * @param {string} accTypes - (Optional, by default \" b#\"). A string with the\n * accidentals types: \" \" means no accidental, \"#\" means sharps, \"b\" mean flats,\n * can be combined (see examples)\n * @return {Array}\n * @example\n * Note.names(\" b\") // => [ \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\", \"A\", \"Bb\", \"B\" ]\n * Note.names(\" #\") // => [ \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\" ]\n */\nexport var names = function (accTypes) { return typeof accTypes !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) {\n        var acc = n[1] || \" \";\n        return accTypes.indexOf(acc) !== -1;\n      }); };\n\nvar SHARPS = names(\" #\");\nvar FLATS = names(\" b\");\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * Split a string into tokens related to note parts.\n * It returns an array of strings `[letter, accidental, octave, modifier]`\n *\n * It always returns an array\n *\n * @param {String} str\n * @return {Array} an array of note tokens\n * @example\n * Note.tokenize(\"C#2\") // => [\"C\", \"#\", \"2\", \"\"]\n * Note.tokenize(\"Db3 major\") // => [\"D\", \"b\", \"3\", \"major\"]\n * Note.tokenize(\"major\") // => [\"\", \"\", \"\", \"major\"]\n * Note.tokenize(\"##\") // => [\"\", \"##\", \"\", \"\"]\n * Note.tokenize() // => [\"\", \"\", \"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { str = \"\"; }\n  var m = REGEX.exec(str);\n  if (!m) { return null; }\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nvar NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  octStr: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\n\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nvar properties = function (str) {\n  var tokens = tokenize(str);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") { return NO_NOTE; }\n  var letter = tokens[0];\n  var acc = tokens[1];\n  var octStr = tokens[2];\n  var p = { letter: letter, acc: acc, octStr: octStr };\n  p.pc = p.letter + p.acc;\n  p.name = p.pc + octStr;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === \"b\" ? -p.acc.length : p.acc.length;\n  p.oct = octStr.length ? +octStr : null;\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get note properties. It returns an object with the following information:\n *\n * - name {String}: the note name. The letter is always in uppercase\n * - letter {String}: the note letter, always in uppercase\n * - acc {String}: the note accidentals\n * - octave {Number}: the octave or null if not present\n * - pc {String}: the pitch class (letter + accidentals)\n * - step {Number}: number equivalent of the note letter. 0 means C ... 6 means B.\n * - alt {Number}: number equivalent of accidentals (negative are flats, positive sharps)\n * - chroma {Number}: number equivalent of the pitch class, where 0 is C, 1 is C# or Db, 2 is D...\n * - midi {Number}: the note midi number (IMPORTANT! it can be outside 0 to 127 range)\n * - freq {Number}: the frequency using an equal temperament at 440Hz\n *\n * This function *always* returns an object with all this properties, but if it\"s\n * not a valid note all properties will be null.\n *\n * The returned object can\"t be mutated.\n *\n * @param {String} note - the note name in scientific notation\n * @return {Object} an object with the properties (or an object will all properties\n * set to null if not valid note)\n * @example\n * Note.props(\"fx-3\").name // => \"F##-3\"\n * Note.props(\"invalid\").name // => null\n * Note.props(\"C#3\").oct // => 3\n * Note.props().oct // => null\n */\nexport var props = memo(properties);\n\n/**\n * Given a note name, return the note name or null if not valid note.\n * The note name will ALWAYS have the letter in upercase and accidentals\n * using # or b\n *\n * Can be used to test if a string is a valid note name.\n *\n * @function\n * @param {Pitch|string}\n * @return {string}\n *\n * @example\n * Note.name(\"cb2\") // => \"Cb2\"\n * [\"c\", \"db3\", \"2\", \"g+\", \"gx4\"].map(Note.name) // => [\"C\", \"Db3\", null, null, \"G##4\"]\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {string|Pitch}\n * @return {string} the pitch class\n * @example\n * Note.pc(\"Db3\") // => \"Db\"\n * [\"db3\", \"bb6\", \"fx2\"].map(Note.pc) // => [ \"Db\", \"Bb\", \"F##\"]\n */\nexport var pc = function (str) { return props(str).pc; };\n\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\n/**\n * Get the note midi number. It always return a number between 0 and 127\n *\n * @function\n * @param {string|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * Note.midi(\"C4\") // => 60\n * Note.midi(60) // => 60\n * @see midi.toMidi\n */\nexport var midi = function (note) {\n  if (typeof note !== \"number\" && typeof note !== \"string\") {\n    return null;\n  }\n  var midi = props(note).midi;\n  var value = midi || midi === 0 ? midi : +note;\n  return isMidiRange(value) ? value : null;\n};\n\n/**\n * Get the frequency from midi number\n *\n * @param {Number} midi - the note midi number\n * @param {Number} tuning - (Optional) 440 by default\n * @return {Number} the frequency or null if not valid note midi\n */\nexport var midiToFreq = function (midi, tuning) {\n    if ( tuning === void 0 ) tuning = 440;\n\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n};\n\n/**\n * Get the frequency of a note\n *\n * @function\n * @param {string|Number} note - the note name or midi note number\n * @return {Number} the frequency\n * @example\n * Note.freq(\"A4\") // => 440\n * Note.freq(69) // => 440\n */\nexport var freq = function (note) { return props(note).freq || midiToFreq(note); };\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precission)\n *\n * @param {Number} frequency\n * @return {Number}\n * @example\n * Note.freqToMidi(220)); //=> 57;\n * Note.freqToMidi(261.62)); //=> 60;\n * Note.freqToMidi(261)); //=> 59.96;\n */\nexport var freqToMidi = function (freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n};\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {string} note - the note name\n * @return {Integer} the chroma number\n * @example\n * Note.chroma(\"Cb\") // => 11\n * [\"C\", \"D\", \"E\", \"F\"].map(Note.chroma) // => [0, 2, 4, 5]\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {string} note - the note\n * @return {Integer} the octave or null if doesn\"t have an octave or not a valid note\n * @example\n * Note.oct(\"C#4\") // => 4\n * Note.oct(\"C\") // => null\n * Note.oct(\"blah\") // => undefined\n */\nexport var oct = function (str) { return props(str).oct; };\n\nvar LETTERS = \"CDEFGAB\";\n/**\n * Given a step number return it's letter (0 = C, 1 = D, 2 = E)\n * @param {number} step\n * @return {string} the letter\n * @example\n * Note.stepToLetter(3) // => \"F\"\n */\nexport var stepToLetter = function (step) { return LETTERS[step]; };\n\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\nvar numToStr = function (num, op) { return (typeof num !== \"number\" ? \"\" : op(num)); };\n\n/**\n * Given an alteration number, return the accidentals\n * @param {Number} alt\n * @return {String}\n * @example\n * Note.altToAcc(-3) // => \"bbb\"\n */\nexport var altToAcc = function (alt) { return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); }); };\n\n/**\n * Creates a note name in scientific notation from note properties,\n * and optionally another note name.\n * It receives an object with:\n * - step: the note step (0 = C, 1 = D, ... 6 = B)\n * - alt: (optional) the alteration. Negative numbers are flats, positive sharps\n * - oct: (optional) the octave\n *\n * Optionally it receives another note as a \"base\", meaning that any prop not explicitly\n * received on the first parameter will be taken from that base note. That way it can be used\n * as an immutable \"set\" operator for a that base note\n *\n * @function\n * @param {Object} props - the note properties\n * @param {String} [baseNote] - note to build the result from. If given, it returns\n * the result of applying the given props to this note.\n * @return {String} the note name in scientific notation or null if not valid properties\n * @example\n * Note.from({ step: 5 }) // => \"A\"\n * Note.from({ step: 1, acc: -1 }) // => \"Db\"\n * Note.from({ step: 2, acc: 2, oct: 2 }) // => \"E##2\"\n * Note.from({ step: 7 }) // => null\n * Note.from({alt: 1, oct: 3}, \"C4\") // => \"C#3\"\n */\nexport var from = function (fromProps, baseNote) {\n  if ( fromProps === void 0 ) fromProps = {};\n  if ( baseNote === void 0 ) baseNote = null;\n\n  var ref = baseNote\n    ? Object.assign({}, props(baseNote), fromProps)\n    : fromProps;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var letter = stepToLetter(step);\n  if (!letter) { return null; }\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n};\n\n/**\n * Deprecated. This is kept for backwards compatibility only.\n * Use Note.from instead\n */\nexport var build = from;\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61, true) // => \"C#4\"\n * // it rounds to nearest note\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(num, sharps) {\n  num = Math.round(num);\n  var pcs = sharps === true ? SHARPS : FLATS;\n  var pc = pcs[num % 12];\n  var o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n\n/**\n * Simplify the note: find an enhramonic note with less accidentals.\n *\n * @param {String} note - the note to be simplified\n * @param {boolean} useSameAccType - (optional, true by default) set to true\n * to ensure the returned note has the same accidental types that the given note\n * @return {String} the simplfiied note or null if not valid note\n * @example\n * Note.simplify(\"C##\") // => \"D\"\n * Note.simplify(\"C###\") // => \"D#\"\n * Note.simplify(\"C###\", false) // => \"Eb\"\n * Note.simplify(\"B#4\") // => \"C5\"\n */\nexport var simplify = function (note, sameAcc) {\n  var ref = props(note);\n  var alt = ref.alt;\n  var chroma = ref.chroma;\n  var midi = ref.midi;\n  if (chroma === null) { return null; }\n  var useSharps = sameAcc === false ? alt < 0 : alt > 0;\n  return midi === null\n    ? pc(fromMidi(chroma, useSharps))\n    : fromMidi(midi, useSharps);\n};\n\n/**\n * Get the simplified and enhramonic note of the given one.\n *\n * @param {String} note\n * @return {String} the enhramonic note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enhramonic(\"C\") // => \"C\"\n */\nexport var enharmonic = function (note) { return simplify(note, false); };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-interval.svg)](https://www.npmjs.com/package/tonal-interval)\n * [![tonal](https://img.shields.io/badge/tonal-interval-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-interval` is a collection of functions to create and manipulate music intervals.\n *\n * The intervals are strings in shorthand notation. Two variations are supported:\n *\n * - standard shorthand notation: type and number, for example: \"M3\", \"d-4\"\n * - inverse shorthand notation: number and then type, for example: \"3M\", \"-4d\"\n *\n * The problem with the standard shorthand notation is that some strings can be\n * parsed as notes or intervals, for example: \"A4\" can be note A in 4th octave\n * or an augmented four. To remove ambiguity, the prefered notation in tonal is the\n * inverse shortand notation.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * // es6\n * import * as Interval from \"tonal-interval\"\n * // es5\n * const Interval = require(\"tonal-interval\")\n * // part of tonal\n * import { Interval } from \"tonal\"\n *\n * Interval.semitones(\"4P\") // => 5\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.simplify(\"9m\") // => \"2m\"\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-interval](https://nodei.co/npm/tonal-interval.png?mini=true)](https://npmjs.org/package/tonal-interval/)\n *\n * ## API Documentation\n *\n * @module Interval\n */\n// shorthand tonal notation (with quality after number)\nvar IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\n\n/**\n * List basic (perfect, major, minor) interval names within a octave\n * @param {String} qualities - (Optional, default \"PMm\") the valid types\n * @return {Array} the interval names\n * @example\n * Interval.names() // => [ \"1P\", \"2m\", \"2M\", \"3m\", \"3M\", \"4P\", \"5P\", \"6m\", \"6M\", \"7m\", \"7M\", \"8P\" ]\n * Interval.names(\"P\") // => [ \"1P\", \"4P\", \"5P\", \"8P\" ]\n * Interval.names(\"PM\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.names(\"Pm\") // => [ \"1P\", \"2m\", \"3m\", \"4P\", \"5P\", \"6m\", \"7m\", \"8P\" ]\n * Interval.names(\"d\") // => []\n */\nexport var names = function (types) { return typeof types !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; }); };\n\nexport var tokenize = function (str) {\n  var m = REGEX.exec(str);\n  return m === null ? null : m[1] ? [m[1], m[2]] : [m[4], m[3]];\n};\n\nvar NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null\n});\n\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\n\nvar qToAlt = function (type, q) {\n  if (q === \"M\" && type === \"M\") { return 0; }\n  if (q === \"P\" && type === \"P\") { return 0; }\n  if (q === \"m\" && type === \"M\") { return -1; }\n  if (/^A+$/.test(q)) { return q.length; }\n  if (/^d+$/.test(q)) { return type === \"P\" ? -q.length : -q.length - 1; }\n  return null;\n};\n\nvar altToQ = function (type, alt) {\n  if (alt === 0) { return type === \"M\" ? \"M\" : \"P\"; }\n  else if (alt === -1 && type === \"M\") { return \"m\"; }\n  else if (alt > 0) { return fillStr(\"A\", alt); }\n  else if (alt < 0) { return fillStr(\"d\", type === \"P\" ? alt : alt + 1); }\n  else { return null; }\n};\n\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\n\nvar properties = function (str) {\n  var t = tokenize(str);\n  if (t === null) { return NO_IVL; }\n  var p = { num: +t[0], q: t[1] };\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") { return NO_IVL; }\n\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = ((p.dir * (SIZES[p.step] + p.alt)) % 12 + 12) % 12;\n  return Object.freeze(p);\n};\n\nvar cache = {};\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: name\n * - num: number\n * - q: quality\n * - step: step\n * - alt: alteration\n * - dir: direction (1 ascending, -1 descending)\n * - type: \"P\" or \"M\" for perfectable or majorable\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n * - ic: the interval class\n *\n * @function\n * @param {String} interval - the interval\n * @return {Object} the interval in the form [number, alt]\n */\nexport function props(str) {\n  if (typeof str !== \"string\") { return NO_IVL; }\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get the number of the interval\n *\n * @function\n * @param {String} interval - the interval\n * @return {Integer}\n * @example\n * Interval.num(\"m2\") // => 2\n * Interval.num(\"P9\") // => 9\n * Interval.num(\"P-4\") // => -4\n */\nexport var num = function (str) { return props(str).num; };\n\n/**\n * Get interval name. Can be used to test if it\"s an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @function\n * @param {String} interval - the interval string or array\n * @return {String} the interval name or null if not valid interval\n * @example\n * Interval.name(\"m-3\") // => \"-3m\"\n * Interval.name(\"3\") // => null\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get size in semitones of an interval\n *\n * @function\n * @param {String} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from \"tonal-interval\"\n * semitones(\"P4\") // => 5\n * // or using tonal\n * Tonal.Interval.semitones(\"P5\") // => 7\n */\nexport var semitones = function (str) { return props(str).semitones; };\n\n/**\n * Get the chroma of the interval. The chroma is a number between 0 and 7\n * that represents the position within an octave (pitch set)\n *\n * @function\n * @param {String} str\n * @return {Number}\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * @function\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * Interval.ic(\"P8\") // => 0\n * Interval.ic(\"m6\") // => 4\n * Interval.ic(10) // => 2\n * [\"P1\", \"M2\", \"M3\", \"P4\", \"P5\", \"M6\", \"M7\"].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nexport var ic = function (ivl) {\n  if (typeof ivl === \"string\") { ivl = props(ivl).chroma; }\n  return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\n};\n\n/**\n * Given a interval property object, get the interval name\n *\n * The properties must contain a `num` *or* `step`, and `alt`:\n *\n * - num: the interval number\n * - step: the interval step (overrides the num property)\n * - alt: the interval alteration\n * - oct: (Optional) the number of octaves\n * - dir: (Optional) the direction\n *\n * @function\n * @param {Object} props - the interval property object\n *\n * @return {String} the interval name\n * @example\n * Interval.build({ step: 1, alt: -1, oct: 0, dir: 1 }) // => \"1d\"\n * Interval.build({ num: 9, alt: -1 }) // => \"9m\"\n */\nexport var build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var num = ref.num;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct; if ( oct === void 0 ) oct = 1;\n  var dir = ref.dir;\n\n  if (step !== undefined) { num = step + 1 + 7 * oct; }\n  if (num === undefined) { return null; }\n\n  var d = dir < 0 ? \"-\" : \"\";\n  var type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n};\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {String} interval - the interval to simplify\n * @return {String} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n */\nexport var simplify = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  return p.simple + p.q;\n};\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {String} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {String} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport var invert = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  var step = (7 - p.step) % 7;\n  var alt = p.type === \"P\" ? -p.alt : -(p.alt + 1);\n  return build({ step: step, alt: alt, oct: p.oct, dir: p.dir });\n};\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it\"s arbitraty, but deterministic.\n *\n * @function\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {String} the interval name\n * @example\n * import { fromSemitones } from \"tonal-interval\"\n * fromSemitones(7) // => \"5P\"\n * // or using tonal\n * Tonal.Distance.fromSemitones(-7) // => \"-5P\"\n */\nexport var fromSemitones = function (num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {String} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-detect.svg?style=flat-square)](https://www.npmjs.com/package/tonal-detect)\n *\n * Find chord and scale names from a collection of notes or pitch classes\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * import { chord } from \"tonal-detect\"\n * chord([\"C\", \"E\", \"G\", \"A\"]) // => [\"CM6\", \"Am7\"]\n *\n * @example\n * const Detect = require(\"tonal-detect\")\n * Detect.chord([\"C\", \"E\", \"G\", \"A\"]) // => [\"CM6\", \"Am7\"]\n *\n * @module Detect\n */\nimport { name, pc } from \"tonal-note\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport { sort, compact } from \"tonal-array\";\nimport { modes } from \"tonal-pcset\";\n\nexport function detector(dictionary, defaultBuilder) {\n  defaultBuilder = defaultBuilder || (function (tonic, names) { return [tonic, names]; });\n  return function(notes, builder) {\n    builder = builder || defaultBuilder;\n    notes = sort(notes.map(pc));\n    return modes(notes)\n      .map(function (mode, i) {\n        var tonic = name(notes[i]);\n        var names = dictionary.names(mode);\n        return names.length ? builder(tonic, names) : null;\n      })\n      .filter(function (x) { return x; });\n  };\n}\n\n/**\n * Given a collection of notes or pitch classes, try to find the chord name\n * @function\n * @param {Array<String>} notes\n * @return {Array<String>} chord names or empty array\n * @example\n * Detect.chord([\"C\", \"E\", \"G\", \"A\"]) // => [\"CM6\", \"Am7\"]\n */\nexport var chord = detector(\n  Dictionary.chord,\n  function (tonic, names) { return tonic + names[0]; }\n);\n\n/**\n * Given a collection of notes or pitch classes, try to find the scale names\n * @function\n * @param {Array<String>} notes\n * @return {Array<String>} scale names or empty array\n * @example\n * Detect.scale([\"f3\", \"a\", \"c5\", \"e2\", \"d\", \"g2\", \"b6\"]) // => [\n * \"C major\",\n * \"D dorian\",\n * \"E phrygian\",\n * \"F lydian\",\n * \"G mixolydian\",\n * \"A aeolian\",\n * \"B locrian\"\n * ]\n */\nexport var scale = detector(\n  Dictionary.scale,\n  function (tonic, names) { return tonic + \" \" + names[0]; }\n);\n\nexport var pcset = detector(Dictionary.pcset);\n","<template>\n  <div id=\"tone\">\n    <h1> Tone.js </h1>\n    <div class=\"content\">\n      <h2>{{getChord}}</h2>\n      <h3>{{notes[0]}}, {{notes[1]}}, {{notes[2]}}, {{notes[3]}}</h3>\n      <button @click=\"clickHandler\"> Play / Pause</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Tone from 'tone'\nimport { chord } from \"tonal-detect\"\n\nimport audioUnlock from '../lib/audioUnlock'\nexport default {\n  name: 'tone',\n  data() {\n    const noteArr = [\"C3\", \"D3\", \"E3\", \"F3\", \"G3\", \"A4\", \"C4\", \"D4\", \"E4\", \"F4\", \"G4\", \"C5\"]\n    const polySynth = new Tone.PolySynth(6, Tone.Synth).toMaster()\n    const pattern = new Tone.Pattern((time, note) => {\n      polySynth.triggerAttackRelease(note, \"1n\")\n      this.$set(this.notes, parseInt(time * 2 % 4), note)\n    }, noteArr, \"randomOnce\")\n    return {\n      isPlaying: false,\n      notes: ['-', '-', '-', '-'],\n      pattern,\n    }\n  },\n  methods: {\n    clickHandler() {\n      if (this.isPlaying) {\n        this.pattern.stop()\n        this.notes = ['-', '-', '-', '-']\n      } else {\n        this.pattern.start()\n      }\n      this.isPlaying = !(this.isPlaying)\n    }\n  },\n  computed: {\n    getChord() {\n      if (this.notes.every(note => note !== '-')) {\n        return chord(this.notes)[0] || '-'\n      }else return '-'\n    }\n  },\n  mounted() {\n    audioUnlock(Tone.context)\n    Tone.Transport.start()\n  },\n  beforeDestroy() {\n    this.pattern.stop()\n    Tone.Transport.cancel().stop()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#tone {\n  max-height: 100vh;\n  overflow: auto;\n  .content {\n    max-width: 50vw;\n    margin: 40px auto;\n    > div {\n      text-align: left;\n      line-height: 1.8;\n      white-space: 1;\n    }\n    img {\n      width: 100%;\n    }\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tone.vue?vue&type=template&id=0a47094a&scoped=true&\"\nimport script from \"./Tone.vue?vue&type=script&lang=js&\"\nexport * from \"./Tone.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Tone.vue?vue&type=style&index=0&id=0a47094a&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0a47094a\",\n  null\n  \n)\n\ncomponent.options.__file = \"Tone.vue\"\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=style&index=0&id=0a47094a&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=style&index=0&id=0a47094a&lang=scss&scoped=true&\""],"sourceRoot":""}