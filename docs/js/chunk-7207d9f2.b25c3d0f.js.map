{"version":3,"sources":["webpack:///./src/views/Tone.vue?447e","webpack:///./node_modules/tonal-note/build/es6.js","webpack:///./node_modules/tonal-interval/build/es6.js","webpack:///./node_modules/tonal-array/build/es6.js","webpack:///./node_modules/tonal-pcset/build/es6.js","webpack:///./node_modules/tonal-dictionary/build/es6.js","webpack:///./node_modules/tonal-detect/build/es6.js","webpack:///src/views/Tone.vue","webpack:///./src/views/Tone.vue?8135","webpack:///./src/views/Tone.vue","webpack:///./src/views/Tone.vue?2c50"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","id","_v","staticClass","_s","getChord","notes","on","click","clickHandler","staticRenderFns","NAMES","split","es6_names","accTypes","slice","filter","n","acc","indexOf","REGEX","tokenize","str","m","exec","toUpperCase","replace","NO_NOTE","Object","freeze","pc","name","step","alt","oct","octStr","chroma","midi","freq","SEMI","properties","tokens","letter","p","charCodeAt","length","midiToFreq","memo","fn","cache","props","es6_name","tuning","Math","pow","log","IVL_TNL","IVL_STR","es6_REGEX","RegExp","SIZES","TYPES","es6_tokenize","NO_IVL","num","q","dir","type","simple","semitones","qToAlt","test","numToStep","abs","es6_properties","t","ic","floor","es6_props","es6_chroma","rotate","times","arr","len","concat","compact","height","sort","src","map","a","b","es6_chr","build_es6_chroma","set","isChroma","Array","isArray","forEach","i","join","modes","normalize","binary","_","r","build_es6_REGEX","es6_dictionary","raw","keys","data","index","add","ivls","push","key","alias","chr","allKeys","dict","names","combine","scale","scales","chord","chords","pcset","detector","dictionary","defaultBuilder","tonic","builder","mode","x","es6_chord","Tonevue_type_script_lang_js_","_this","noteArr","polySynth","Tone_default","PolySynth","Synth","toMaster","pattern","Pattern","time","note","triggerAttackRelease","$set","parseInt","isPlaying","methods","stop","start","computed","every","mounted","audioUnlock","context","Transport","beforeDestroy","cancel","views_Tonevue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Tone_vue_vue_type_style_index_0_id_0a47094a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Tone_vue_vue_type_style_index_0_id_0a47094a_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/chunk-7207d9f2.b25c3d0f.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"tone\"}},[_c('h1',[_vm._v(\" Tone.js \")]),_c('div',{staticClass:\"content\"},[_c('h2',[_vm._v(_vm._s(_vm.getChord))]),_c('h3',[_vm._v(_vm._s(_vm.notes[0])+\", \"+_vm._s(_vm.notes[1])+\", \"+_vm._s(_vm.notes[2])+\", \"+_vm._s(_vm.notes[3]))]),_c('button',{on:{\"click\":_vm.clickHandler}},[_vm._v(\" Play / Pause\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nvar names = function (accTypes) {\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n};\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nvar properties = function (str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n};\r\nvar memo = function (fn, cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n};\r\nvar props = memo(properties);\r\nvar name = function (str) { return props(str).name; };\r\nvar pc = function (str) { return props(str).pc; };\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nvar midi = function (note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n};\r\nvar midiToFreq = function (midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\r\n};\r\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nvar freqToMidi = function (freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n};\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar oct = function (str) { return props(str).oct; };\r\nvar LETTERS = \"CDEFGAB\";\r\nvar stepToLetter = function (step) { return LETTERS[step]; };\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar numToStr = function (num, op) {\r\n    return typeof num !== \"number\" ? \"\" : op(num);\r\n};\r\nvar altToAcc = function (alt) {\r\n    return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); });\r\n};\r\nvar from = function (fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n};\r\nvar build = from;\r\nfunction fromMidi(num, sharps) {\r\n    if (sharps === void 0) { sharps = false; }\r\n    num = Math.round(num);\r\n    var pcs = sharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[num % 12];\r\n    var o = Math.floor(num / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar simplify = function (note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n};\r\nvar enharmonic = function (note) { return simplify(note, false); };\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };\n","var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nvar names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nvar tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nvar qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nvar altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nfunction props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nvar num = function (str) { return props(str).num; };\r\nvar name = function (str) { return props(str).name; };\r\nvar semitones = function (str) { return props(str).semitones; };\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nvar build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nvar simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nvar invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nvar fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n      ? ascR(a, b - a + 1)\n      : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {string} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {string} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {string} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {string} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-detect.svg?style=flat-square)](https://www.npmjs.com/package/tonal-detect)\n *\n * Find chord and scale names from a collection of notes or pitch classes\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * import { chord } from \"tonal-detect\"\n * chord([\"C\", \"E\", \"G\", \"A\"]) // => [\"CM6\", \"Am7\"]\n *\n * @example\n * const Detect = require(\"tonal-detect\")\n * Detect.chord([\"C\", \"E\", \"G\", \"A\"]) // => [\"CM6\", \"Am7\"]\n *\n * @module Detect\n */\nimport { name, pc } from \"tonal-note\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport { sort, compact } from \"tonal-array\";\nimport { modes } from \"tonal-pcset\";\n\nexport function detector(dictionary, defaultBuilder) {\n  defaultBuilder = defaultBuilder || (function (tonic, names) { return [tonic, names]; });\n  return function(notes, builder) {\n    builder = builder || defaultBuilder;\n    notes = sort(notes.map(pc));\n    return modes(notes)\n      .map(function (mode, i) {\n        var tonic = name(notes[i]);\n        var names = dictionary.names(mode);\n        return names.length ? builder(tonic, names) : null;\n      })\n      .filter(function (x) { return x; });\n  };\n}\n\n/**\n * Given a collection of notes or pitch classes, try to find the chord name\n * @function\n * @param {Array<String>} notes\n * @return {Array<String>} chord names or empty array\n * @example\n * Detect.chord([\"C\", \"E\", \"G\", \"A\"]) // => [\"CM6\", \"Am7\"]\n */\nexport var chord = detector(\n  Dictionary.chord,\n  function (tonic, names) { return tonic + names[0]; }\n);\n\n/**\n * Given a collection of notes or pitch classes, try to find the scale names\n * @function\n * @param {Array<String>} notes\n * @return {Array<String>} scale names or empty array\n * @example\n * Detect.scale([\"f3\", \"a\", \"c5\", \"e2\", \"d\", \"g2\", \"b6\"]) // => [\n * \"C major\",\n * \"D dorian\",\n * \"E phrygian\",\n * \"F lydian\",\n * \"G mixolydian\",\n * \"A aeolian\",\n * \"B locrian\"\n * ]\n */\nexport var scale = detector(\n  Dictionary.scale,\n  function (tonic, names) { return tonic + \" \" + names[0]; }\n);\n\nexport var pcset = detector(Dictionary.pcset);\n","<template>\n  <div id=\"tone\">\n    <h1> Tone.js </h1>\n    <div class=\"content\">\n      <h2>{{getChord}}</h2>\n      <h3>{{notes[0]}}, {{notes[1]}}, {{notes[2]}}, {{notes[3]}}</h3>\n      <button @click=\"clickHandler\"> Play / Pause</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Tone from 'tone'\nimport { chord } from \"tonal-detect\"\n\nimport audioUnlock from '../lib/audioUnlock'\nexport default {\n  name: 'tone',\n  data() {\n    const noteArr = [\"C3\", \"D3\", \"E3\", \"F3\", \"G3\", \"A4\", \"C4\", \"D4\", \"E4\", \"F4\", \"G4\", \"C5\"]\n    const polySynth = new Tone.PolySynth(6, Tone.Synth).toMaster()\n    const pattern = new Tone.Pattern((time, note) => {\n      polySynth.triggerAttackRelease(note, \"1n\")\n      this.$set(this.notes, parseInt(time * 2 % 4), note)\n    }, noteArr, \"randomOnce\")\n    return {\n      isPlaying: false,\n      notes: ['-', '-', '-', '-'],\n      pattern,\n    }\n  },\n  methods: {\n    clickHandler() {\n      if (this.isPlaying) {\n        this.pattern.stop()\n        this.notes = ['-', '-', '-', '-']\n      } else {\n        this.pattern.start()\n      }\n      this.isPlaying = !(this.isPlaying)\n    }\n  },\n  computed: {\n    getChord() {\n      if (this.notes.every(note => note !== '-')) {\n        return chord(this.notes)[0] || '-'\n      }else return '-'\n    }\n  },\n  mounted() {\n    audioUnlock(Tone.context)\n    Tone.Transport.start()\n  },\n  beforeDestroy() {\n    this.pattern.stop()\n    Tone.Transport.cancel().stop()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#tone {\n  max-height: 100vh;\n  overflow: auto;\n  .content {\n    max-width: 50vw;\n    margin: 40px auto;\n    > div {\n      text-align: left;\n      line-height: 1.8;\n      white-space: 1;\n    }\n    img {\n      width: 100%;\n    }\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tone.vue?vue&type=template&id=0a47094a&scoped=true&\"\nimport script from \"./Tone.vue?vue&type=script&lang=js&\"\nexport * from \"./Tone.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Tone.vue?vue&type=style&index=0&id=0a47094a&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0a47094a\",\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=style&index=0&id=0a47094a&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tone.vue?vue&type=style&index=0&id=0a47094a&lang=scss&scoped=true&\""],"sourceRoot":""}